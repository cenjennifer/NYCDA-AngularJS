angular.module('MyApp')

.value("Yellow", {color: "yellow", active:false})
.value("Blue", {color: "blue", active:false})
.value("Red", {color: "red", active:false})
.value("Green", {color: "green", active:false})

.service("ColorsEffect", function($timeout, $interval, Yellow, Blue, Red, Green) {
  var self = this;

  self.toggleColor = function (Color){
    Color.active = true;
    $timeout(function() {
      Color.active = false;
    }, 700);
  };

  self.displayArray = function(colorsArray) {
    var index = 0;

    $interval( function() {
      if (colorsArray[index] == "yellow") {
        self.toggleColor(Yellow);
      } else if (colorsArray[index] == "blue") {
        self.toggleColor(Blue);
      } else if (colorsArray[index] == "red") {
        self.toggleColor(Red);
      } else {
        self.toggleColor(Green);
      }
      index++;
    }, 700, colorsArray.length);
  };
})

.service("resetGame", function(Round, SimonColors){
    var self = this;
    Round = 1;
    SimonColors.SimonArray = [];
    PlayerColors = [];
})

//Returns the random colors generated by Simon for each round
.service("SimonColors", function(Yellow, Blue, Green, Red, ColorsEffect) {
   var self = this;
   self.SimonArray = [];

   self.addRandomColor = function(){
        var random = Math.floor(Math.random()*4);
        if (random === 0){
            self.SimonArray.push("yellow");
        } else if (random === 1){
           self.SimonArray.push("blue");
        } else if (random === 2){
            self.SimonArray.push("red");
        } else if (random === 3){
            self.SimonArray.push("green");
        }

        return self.SimonArray;
    };
})

.service("SimonResults", function($interval, SimonColors){
  var self = this;
  self.simonResults = function(round){
      self.roundCount = round;
      $interval( function(){
        self.simonArray = SimonColors.addRandomColor();
          return self.simonArray;
    }, 1000, self.roundCount);
  };
})

.factory("PlayerColors", function() {
  function PlayerColors(){
    this.selectedColors = [];
  }
    PlayerColors.prototype.addColors = function(color){
        this.selectedColors.push(color);
    };
    return PlayerColors;
})

.factory("Round", function(){
  var roundCount = 1;
  return roundCount;
})


.service("ComparingArrays", function(){
  var self = this;

  self.currentIndex = 0;

  self.compareColors = function(simonsArray, userColor){
    if (simonsArray[self.currentIndex] == userColor.color) {
      self.currentIndex++;

      if (self.currentIndex == simonsArray.length) {
        self.currentIndex = 0;
      }
      return true;
        
    } else {
      return false;
    }

   };
});


